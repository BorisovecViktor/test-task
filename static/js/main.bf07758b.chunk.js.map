{"version":3,"sources":["App.tsx","store/products.ts","store/error.ts","store/loading.ts","store/index.ts","index.tsx"],"names":["App","className","reducer","products","action","type","errorMessage","loading","rootReducer","combineReducers","productsReducer","errorReducer","isLoading","loadingReducer","persistedState","localStorage","getItem","JSON","parse","store","createStore","composeWithDevTools","applyMiddleware","thunk","subscribe","setItem","stringify","getState","ReactDOM","render","document","getElementById"],"mappings":"2OAaeA,G,MARH,WACV,OACE,yBAAKC,UAAU,OACb,qC,oCCeSC,EAVC,WAAwD,IAAvDC,EAAsD,uDAAhC,GAAIC,EAA4B,uCACrE,OAAQA,EAAOC,MACb,IAZiB,eAaf,OAAOD,EAAOD,SAEhB,QACE,OAAOA,ICIED,EAVC,WAAiD,IAAhDI,EAA+C,uDAAhC,GAAIF,EAA4B,uCAC9D,OAAQA,EAAOC,MACb,IAZc,YAaZ,OAAOD,EAAOE,aAEhB,QACE,OAAOA,ICOEJ,EAZC,WAA+C,IAA9CK,EAA6C,wDAA5BH,EAA4B,uCAC5D,OAAQA,EAAOC,MACb,IAdkB,gBAehB,OAAO,EAET,IAhBmB,iBAiBjB,OAAO,EAET,QAAS,OAAOE,ICVdC,EAAcC,0BAAgB,CAClCN,SAAUO,EACVJ,aAAcK,EACdC,UAAWC,IAyBPC,EAAiBC,aAAaC,QAAQ,aACxCC,KAAKC,MAAMH,aAAaC,QAAQ,cAAgB,IAChD,GAEEG,EAAQC,sBACZZ,EACAM,EACAO,8BAAoBC,0BAAgBC,OAGtCJ,EAAMK,WAAU,WACdT,aAAaU,QAAQ,YAAaR,KAAKS,UAAUP,EAAMQ,gBAG1CR,QC9CfS,IAASC,OACP,kBAAC,IAAD,CAAUV,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJW,SAASC,eAAe,W","file":"static/js/main.bf07758b.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\n// import * as store from './store';\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <h1>hi</h1>\n    </div>\n  );\n};\n\nexport default App;\n","import { Action } from 'redux';\n\n\nconst SET_PRODUCTS = 'SET_PRODUCTS';\n\ntype SetProductsAction = Action<typeof SET_PRODUCTS> & {\n  products: Product[];\n};\n\nexport const setProducts = (products: Product[]) => ({ type: SET_PRODUCTS, products });\n\ntype PossibleActions = SetProductsAction;\n\nconst reducer = (products: Product[] = [], action: PossibleActions) => {\n  switch (action.type) {\n    case SET_PRODUCTS:\n      return action.products;\n\n    default:\n      return products;\n  }\n};\n\nexport default reducer;\n","import { Action } from 'redux';\n\n\nconst SET_ERROR = 'SET_ERROR';\n\ntype SetErrorAction = Action<typeof SET_ERROR> & {\n  errorMessage: string;\n};\n\nexport const setError = (errorMessage: string) => ({ type: SET_ERROR, errorMessage });\n\ntype PossibleActions = SetErrorAction;\n\nconst reducer = (errorMessage = '', action: PossibleActions) => {\n  switch (action.type) {\n    case SET_ERROR:\n      return action.errorMessage;\n\n    default:\n      return errorMessage;\n  }\n};\n\nexport default reducer;\n","import { Action } from 'redux';\n\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\ntype SetLoading = Action<typeof START_LOADING | typeof FINISH_LOADING> & {\n  loading: boolean;\n};\n\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\ntype PossibleActions = SetLoading;\n\nconst reducer = (loading = false, action: PossibleActions) => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n\n    case FINISH_LOADING:\n      return false;\n\n    default: return loading;\n  }\n}\n\nexport default reducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Dispatch } from 'react';\n\nimport * as api from '../helpers/api';\n\nimport productsReducer, { setProducts } from './products';\nimport errorReducer, { setError } from './error';\nimport loadingReducer, { startLoading, finishLoading } from './loading';\n\n\nconst rootReducer = combineReducers({\n  products: productsReducer,\n  errorMessage: errorReducer,\n  isLoading: loadingReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const getProducts = (state: RootState) => state.products;\nexport const getIsLoading = (state: RootState) => state.isLoading;\n\nexport const loadProducts = () => {\n  return async (dispatch: Dispatch<unknown>) => {\n    dispatch(setError(''));\n    dispatch(startLoading());\n\n    try {\n      const products = await api.fetchProducts();\n\n      dispatch(setProducts(products));\n      dispatch(finishLoading());\n    } catch (e) {\n      dispatch(setError(e.message));\n      dispatch(finishLoading());\n    }\n  };\n};\n\nconst persistedState = localStorage.getItem('rootState')\n  ? JSON.parse(localStorage.getItem('rootState') || '')\n  : {};\n\nconst store = createStore(\n  rootReducer,\n  persistedState,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nstore.subscribe(() => {\n  localStorage.setItem('rootState', JSON.stringify(store.getState()));\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}